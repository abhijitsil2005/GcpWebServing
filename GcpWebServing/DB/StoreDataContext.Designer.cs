//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 10/18/2017 1:11:27 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace OnlinestoreContext
{

    [DatabaseAttribute(Name = "onlinestore")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class OnlineStoreDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(OnlineStoreDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCatProductLink(CatProductLink instance);
        partial void UpdateCatProductLink(CatProductLink instance);
        partial void DeleteCatProductLink(CatProductLink instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);

        #endregion

        public OnlineStoreDataContext() :
        base(GetConnectionString("OnlineStoreDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public OnlineStoreDataContext(MappingSource mappingSource) :
        base(GetConnectionString("OnlineStoreDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public OnlineStoreDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OnlineStoreDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OnlineStoreDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OnlineStoreDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<CatProductLink> CatProductLinks
        {
            get
            {
                return this.GetTable<CatProductLink>();
            }
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }
    }
}

namespace OnlinestoreContext
{

    /// <summary>
    /// There are no comments for OnlinestoreContext.CatProductLink in the schema.
    /// </summary>
    [Table(Name = @"OnlineStore.Cat_Product_Link")]
    public partial class CatProductLink : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CatProductLinkKey;

        private System.Nullable<int> _ProductId;

        private System.Nullable<int> _CategoryKey;
        #pragma warning restore 0649

        private EntityRef<Category> _Category;

        private EntityRef<Product> _Product;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCatProductLinkKeyChanging(int value);
        partial void OnCatProductLinkKeyChanged();
        partial void OnProductIdChanging(System.Nullable<int> value);
        partial void OnProductIdChanged();
        partial void OnCategoryKeyChanging(System.Nullable<int> value);
        partial void OnCategoryKeyChanged();
        #endregion

        public CatProductLink()
        {
            this._Category  = default(EntityRef<Category>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CatProductLinkKey in the schema.
        /// </summary>
        [Column(Name = @"Cat_Product_Link_Key", Storage = "_CatProductLinkKey", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CatProductLinkKey
        {
            get
            {
                return this._CatProductLinkKey;
            }
            set
            {
                if (this._CatProductLinkKey != value)
                {
                    this.OnCatProductLinkKeyChanging(value);
                    this.SendPropertyChanging("CatProductLinkKey");
                    this._CatProductLinkKey = value;
                    this.SendPropertyChanged("CatProductLinkKey");
                    this.OnCatProductLinkKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Storage = "_ProductId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryKey in the schema.
        /// </summary>
        [Column(Storage = "_CategoryKey", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CategoryKey
        {
            get
            {
                return this._CategoryKey;
            }
            set
            {
                if (this._CategoryKey != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryKeyChanging(value);
                    this.SendPropertyChanging("CategoryKey");
                    this._CategoryKey = value;
                    this.SendPropertyChanged("CategoryKey");
                    this.OnCategoryKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_CatProductLink", Storage="_Category", ThisKey="CategoryKey", OtherKey="CategoryKey", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category");
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.CatProductLinks.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryKey = value.CategoryKey;
                        value.CatProductLinks.Add(this);
                    }
                    else
                    {
                        this._CategoryKey = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_CatProductLink", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.CatProductLinks.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.CatProductLinks.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for OnlinestoreContext.Category in the schema.
    /// </summary>
    [Table(Name = @"OnlineStore.Category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryKey;

        private string _CategoryId;

        private string _CategoryName;
        #pragma warning restore 0649

        private EntitySet<CatProductLink> _CatProductLinks;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryKeyChanging(int value);
        partial void OnCategoryKeyChanged();
        partial void OnCategoryIdChanging(string value);
        partial void OnCategoryIdChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        #endregion

        public Category()
        {
            this._CatProductLinks = new EntitySet<CatProductLink>(new Action<CatProductLink>(this.attach_CatProductLinks), new Action<CatProductLink>(this.detach_CatProductLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryKey in the schema.
        /// </summary>
        [Column(Name = @"categoryKey", Storage = "_CategoryKey", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryKey
        {
            get
            {
                return this._CategoryKey;
            }
            set
            {
                if (this._CategoryKey != value)
                {
                    this.OnCategoryKeyChanging(value);
                    this.SendPropertyChanging("CategoryKey");
                    this._CategoryKey = value;
                    this.SendPropertyChanged("CategoryKey");
                    this.OnCategoryKeyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Storage = "_CategoryId", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CatProductLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_CatProductLink", Storage="_CatProductLinks", ThisKey="CategoryKey", OtherKey="CategoryKey", DeleteRule="NO ACTION")]
        public EntitySet<CatProductLink> CatProductLinks
        {
            get
            {
                return this._CatProductLinks;
            }
            set
            {
                this._CatProductLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CatProductLinks(CatProductLink entity)
        {
            this.SendPropertyChanging("CatProductLinks");
            entity.Category = this;
        }
    
        private void detach_CatProductLinks(CatProductLink entity)
        {
            this.SendPropertyChanging("CatProductLinks");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for OnlinestoreContext.Product in the schema.
    /// </summary>
    [Table(Name = @"OnlineStore.Products")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _Sku;

        private string _Name;

        private string _Type;

        private System.Nullable<decimal> _Price;

        private string _Upc;

        private System.Nullable<decimal> _Shipping;

        private string _Description;

        private string _Manufacturer;

        private string _Model;

        private string _Url;

        private string _Image;

        private string _StartsWith;
        #pragma warning restore 0649

        private EntitySet<CatProductLink> _CatProductLinks;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnSkuChanging(int value);
        partial void OnSkuChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnUpcChanging(string value);
        partial void OnUpcChanged();
        partial void OnShippingChanging(System.Nullable<decimal> value);
        partial void OnShippingChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnManufacturerChanging(string value);
        partial void OnManufacturerChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnStartsWithChanging(string value);
        partial void OnStartsWithChanged();
        #endregion

        public Product()
        {
            this._CatProductLinks = new EntitySet<CatProductLink>(new Action<CatProductLink>(this.attach_CatProductLinks), new Action<CatProductLink>(this.detach_CatProductLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sku in the schema.
        /// </summary>
        [Column(Name = @"sku", Storage = "_Sku", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Sku
        {
            get
            {
                return this._Sku;
            }
            set
            {
                if (this._Sku != value)
                {
                    this.OnSkuChanging(value);
                    this.SendPropertyChanging("Sku");
                    this._Sku = value;
                    this.SendPropertyChanged("Sku");
                    this.OnSkuChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", DbType = "DECIMAL(18,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging("Price");
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Upc in the schema.
        /// </summary>
        [Column(Name = @"upc", Storage = "_Upc", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Upc
        {
            get
            {
                return this._Upc;
            }
            set
            {
                if (this._Upc != value)
                {
                    this.OnUpcChanging(value);
                    this.SendPropertyChanging("Upc");
                    this._Upc = value;
                    this.SendPropertyChanged("Upc");
                    this.OnUpcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Shipping in the schema.
        /// </summary>
        [Column(Name = @"shipping", Storage = "_Shipping", DbType = "DECIMAL(18,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Shipping
        {
            get
            {
                return this._Shipping;
            }
            set
            {
                if (this._Shipping != value)
                {
                    this.OnShippingChanging(value);
                    this.SendPropertyChanging("Shipping");
                    this._Shipping = value;
                    this.SendPropertyChanged("Shipping");
                    this.OnShippingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(600) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Manufacturer in the schema.
        /// </summary>
        [Column(Name = @"manufacturer", Storage = "_Manufacturer", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Manufacturer
        {
            get
            {
                return this._Manufacturer;
            }
            set
            {
                if (this._Manufacturer != value)
                {
                    this.OnManufacturerChanging(value);
                    this.SendPropertyChanging("Manufacturer");
                    this._Manufacturer = value;
                    this.SendPropertyChanged("Manufacturer");
                    this.OnManufacturerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Model in the schema.
        /// </summary>
        [Column(Name = @"model", Storage = "_Model", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging("Model");
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Url in the schema.
        /// </summary>
        [Column(Name = @"url", Storage = "_Url", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Url
        {
            get
            {
                return this._Url;
            }
            set
            {
                if (this._Url != value)
                {
                    this.OnUrlChanging(value);
                    this.SendPropertyChanging("Url");
                    this._Url = value;
                    this.SendPropertyChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [Column(Name = @"image", Storage = "_Image", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging("Image");
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartsWith in the schema.
        /// </summary>
        [Column(Storage = "_StartsWith", DbType = "VARCHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string StartsWith
        {
            get
            {
                return this._StartsWith;
            }
            set
            {
                if (this._StartsWith != value)
                {
                    this.OnStartsWithChanging(value);
                    this.SendPropertyChanging("StartsWith");
                    this._StartsWith = value;
                    this.SendPropertyChanged("StartsWith");
                    this.OnStartsWithChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CatProductLinks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_CatProductLink", Storage="_CatProductLinks", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
        public EntitySet<CatProductLink> CatProductLinks
        {
            get
            {
                return this._CatProductLinks;
            }
            set
            {
                this._CatProductLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CatProductLinks(CatProductLink entity)
        {
            this.SendPropertyChanging("CatProductLinks");
            entity.Product = this;
        }
    
        private void detach_CatProductLinks(CatProductLink entity)
        {
            this.SendPropertyChanging("CatProductLinks");
            entity.Product = null;
        }
    }

}
